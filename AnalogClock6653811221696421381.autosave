import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

DateTimeFormatter dtf = DateTimeFormatter.ofPattern("ss");
int curSecond = 0;

PGraphics pg;

void setup() {
  size(640, 480);
  pg = createGraphics(width, height);
  pg.beginDraw();
  pg.line(0, 0, 0, 0);
  pg.endDraw();
  background(0);
  
  DrawTimeline();

  Update();
}

void draw() {
  Update();
}

void Update() {
    LocalDateTime now = LocalDateTime.now();
    curSecond = Integer.valueOf(dtf.format(now));
    DrawClockwise(curSecond);
  }

void DrawTimeline() {
  stroke(255);
  strokeWeight(15);

  line(width / 2, height / 2, width / 2, height / 2);

  strokeWeight(10);

  for (int i = 0; i < 4; i++) {
    float angle = (360 / 4) * i;
    float radius = (height + width) / 2 / 4;
      
    float posX = cos(radians(angle)) * radius + width / 2;
    float posY = sin(radians(angle)) * radius + height / 2;
    
    line(posX, posY, posX, posY);
  }
    
  strokeWeight(5);
  for (int i = 0; i < 12; i++) {
    float angle = (360 / 12) * i;
    float radius = (height + width) / 2 / 4;
      
    float posX = cos(radians(angle)) * radius + width / 2;
    float posY = sin(radians(angle)) * radius + height / 2;
    
    line(posX, posY, posX, posY);
  }
}

void DrawClockwise(int pos) {
    pg.clear();

    float angle = (360 / 12) *  pos;
    float radius = (height + width) / 2 / 4 - 7;
      
    float posX = cos(radians(angle)) * radius + width / 2;
    float posY = sin(radians(angle)) * radius + height / 2;
    
    pg.beginDraw();
    pg.line(posX, posY, posX, posY);
    pg.endDraw();
}